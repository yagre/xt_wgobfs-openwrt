name: Create Release on OpenWRT Update

on:
  schedule:
    - cron: '0 0 */3 * *'   # каждые 3 дня
  workflow_dispatch:       # ручной запуск

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
      release_tag:    ${{ steps.get_release.outputs.release_tag }}      # v24.10.4
      clean_tag:      ${{ steps.get_release.outputs.clean_tag }}        # 24.10.4
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup cache
        run: |
          mkdir -p .github/cache
          touch .github/cache/api_last_call

      # -----------------------------------------------------------------
      # 1. Получаем последний релиз OpenWRT
      # -----------------------------------------------------------------
      - name: Get latest OpenWRT release
        id: get_release
        run: |
          check_rate_limit() {
            LAST=$(cat .github/cache/api_last_call 2>/dev/null || echo 0)
            NOW=$(date +%s)
            [[ $((NOW - LAST)) -lt 2 ]] && sleep 2
            echo $NOW > .github/cache/api_last_call
          }

          CACHE=".github/cache/latest_release.json"
          TIME=".github/cache/cache_time"
          NOW=$(date +%s)

          if [[ -f "$CACHE" && -f "$TIME" ]]; then
            AGE=$((NOW - $(cat "$TIME")))
            [[ $AGE -lt 3600 ]] && USE_CACHE=true || USE_CACHE=false
          else
            USE_CACHE=false
          fi

          if [[ $USE_CACHE == false ]]; then
            check_rate_limit
            CODE=$(curl -sL -w "%{http_code}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/openwrt/openwrt/releases/latest \
              -o "$CACHE")
            [[ $CODE -eq 200 ]] && echo $NOW > "$TIME"
          fi

          TAG=$(jq -r .tag_name "$CACHE")
          CLEAN_TAG=${TAG#v}                     # <--- убираем v
          echo "release_tag=$TAG"          >> $GITHUB_OUTPUT
          echo "clean_tag=$CLEAN_TAG"      >> $GITHUB_OUTPUT
          echo "OpenWRT tag: $TAG  →  clean: $CLEAN_TAG"

      # -----------------------------------------------------------------
      # 2. Проверяем, есть ли уже такой релиз в нашем репозитории
      # -----------------------------------------------------------------
      - name: Check if release exists
        id: check_release
        run: |
          TAG=${{ steps.get_release.outputs.release_tag }}
          CACHE=".github/cache/release_check_$TAG.json"
          TIME=".github/cache/release_check_time_$TAG"

          NOW=$(date +%s)
          if [[ -f "$CACHE" && -f "$TIME" ]]; then
            AGE=$((NOW - $(cat "$TIME")))
            [[ $AGE -lt 3600 ]] && USE_CACHE=true || USE_CACHE=false
          else
            USE_CACHE=false
          fi

          if [[ $USE_CACHE == false ]]; then
            CODE=$(curl -sL -w "%{http_code}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/yagre/xt_wgobfs-openwrt/releases/tags/$TAG" \
              -o "$CACHE")
            echo $NOW > "$TIME"
          fi

          if [[ $CODE == "404" ]] || [[ ! -s "$CACHE" ]]; then
            echo "release_exists=false" >> $GITHUB_OUTPUT
          else
            echo "release_exists=true"  >> $GITHUB_OUTPUT
          fi

      # -----------------------------------------------------------------
      # 3. Диагностика (можно удалить после отладки)
      # -----------------------------------------------------------------
      - name: Debug info
        run: |
          echo "=== CACHE ==="
          ls -la .github/cache/
          echo "=== TAG INFO ==="
          echo "Full tag   : ${{ steps.get_release.outputs.release_tag }}"
          echo "Clean tag  : ${{ steps.get_release.outputs.clean_tag }}"
          echo "Exists?    : ${{ steps.check_release.outputs.release_exists }}"

      # -----------------------------------------------------------------
      # 4. Создаём релиз, если его ещё нет
      # -----------------------------------------------------------------
      - name: Create release
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          ART=$(cat <<'EOF'
          \`\`\`
            _______                     ________        __
           |       |.-----.-----.-----.|  |  |  |.----.|  |_
           |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
           |_______||   __|_____|__|__||________||__|  |____|
                    |__|  
          -----------------------------------------------------
          OpenWrt ${{ steps.get_release.outputs.clean_tag }}
          -----------------------------------------------------
          \`\`\`
          EOF
          )

          curl -X POST https://api.github.com/repos/yagre/xt_wgobfs-openwrt/releases \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg tag  "${{ steps.get_release.outputs.clean_tag }}" \
              --arg name "Build xt_wgobfs for OpenWrt ${{ steps.get_release.outputs.clean_tag }}" \
              --arg body "$ART" \
              '{tag_name:$tag, name:$name, body:$body}')"

  # -----------------------------------------------------------------
  # 5. Запускаем сборку (только если релиз новый)
  # -----------------------------------------------------------------
  run-build:
    needs: sync-releases
    if: needs.sync-releases.outputs.release_exists == 'false'
    runs-on: ubuntu-latest
    uses: yagre/xt_wgobfs-openwrt/.github/workflows/build-module.yml@main
    with:
      # Передаём **БЕЗ** префикса v
      tag_name: ${{ needs.sync-releases.outputs.clean_tag }}